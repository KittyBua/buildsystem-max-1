# -----------------------------------------------------------------------------

BS_JLEVEL ?= 0
BS_INIT_SYSV = 1
#BS_INIT_SYSTEMD = 1

#SHELL := $(SHELL) -x

# -----------------------------------------------------------------------------

ifndef MAKE
MAKE := make
endif
ifndef HOSTMAKE
HOSTMAKE = $(MAKE)
endif
HOSTMAKE := $(shell which $(HOSTMAKE) || type -p $(HOSTMAKE) || echo make)

# If BS_JLEVEL is 0, scale the maximum concurrency with the number of
# CPUs. An additional job is used in order to keep processors busy
# while waiting on I/O.
# If the number of processors is not available, assume one.
ifeq ($(BS_JLEVEL),0)
PARALLEL_JOBS := $(shell echo \
	$$((1 + `getconf _NPROCESSORS_ONLN 2>/dev/null || echo 1`)))
else
PARALLEL_JOBS := $(BS_JLEVEL)
endif

MAKE1 := $(HOSTMAKE) -j1
override MAKE = $(HOSTMAKE) \
	$(if $(findstring j,$(filter-out --%,$(MAKEFLAGS))),,-j$(PARALLEL_JOBS))

ifeq ($(BOXTYPE),generic)
CROSSTOOL_GCC_VERSION = gcc-$(shell gcc -dumpfullversion)
else
CROSSTOOL_GCC_VERSION = gcc-$(GCC_VERSION)
endif

ifeq ($(TARGET_ARCH),arm)
GNU_TARGET_NAME = arm-cortex_a15-linux-gnueabihf
TARGET_CPU      = armv7ve
TARGET_ABI      = -march=$(TARGET_CPU) -mtune=cortex-a15 -mfpu=neon-vfpv4 -mfloat-abi=hard
TARGET_ENDIAN   = little
else ifeq ($(TARGET_ARCH),aarch64)
GNU_TARGET_NAME = aarch64-unknown-linux-gnu
TARGET_CPU      =
TARGET_ABI      =
TARGET_ENDIAN   = little
else ifeq ($(TARGET_ARCH),mips)
GNU_TARGET_NAME = mipsel-unknown-linux-gnu
TARGET_CPU      = mips32
TARGET_ABI      = -march=$(TARGET_CPU) -mtune=mips32
TARGET_ENDIAN   = little
else ifeq ($(TARGET_ARCH),$(filter $(TARGET_ARCH),x86_64 i686))
GNU_TARGET_NAME = $(TARGET_ARCH)-linux-gnu
TARGET_CPU      = generic
TARGET_ABI      =
TARGET_ENDIAN   =
endif

OPTIMIZATIONS ?= size
ifeq ($(OPTIMIZATIONS),size)
TARGET_OPTIMIZATION  = -pipe -Os
TARGET_EXTRA_CFLAGS  = -ffunction-sections -fdata-sections
TARGET_EXTRA_LDFLAGS = -Wl,--gc-sections
else ifeq ($(OPTIMIZATIONS),normal)
TARGET_OPTIMIZATION  = -pipe -O2
TARGET_EXTRA_CFLAGS  =
TARGET_EXTRA_LDFLAGS =
else ifeq ($(OPTIMIZATIONS),debug)
TARGET_OPTIMIZATION  = -O0 -g
TARGET_EXTRA_CFLAGS  =
TARGET_EXTRA_LDFLAGS =
endif

TARGET_CPPFLAGS += -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -I$(TARGET_INCLUDE_DIR)
TARGET_CFLAGS = $(TARGET_CPPFLAGS) $(TARGET_ABI) $(TARGET_OPTIMIZATION) $(TARGET_DEBUGGING)
TARGET_CXXFLAGS = $(TARGET_CFLAGS)

TARGET_LDFLAGS = \
	$(TARGET_EXTRA_LDFLAGS) \
	-L$(TARGET_DIR)/usr/lib \
	-L$(TARGET_DIR)/lib \
	-Wl,--enable-new-dtags \
	-Wl,-rpath-link,$(TARGET_DIR)/usr/lib \
	-Wl,-rpath-link,$(TARGET_DIR)/lib \
	-Wl,-rpath,$(TARGET_DIR)/usr/lib \
	-Wl,-rpath,$(TARGET_DIR)/lib \
	-Wl,-O1

TARGET_CROSS = $(GNU_TARGET_NAME)-

# gcc-4.7 and later ships with wrappers that will automatically pass
# arguments to the binutils tools. Those are paths to necessary linker
# plugins.
TARGET_GCC_WRAPPERS_PREFIX = gcc-

# Define TARGET_xx variables for all common binutils/gcc
TARGET_AR       = $(TARGET_CROSS)$(TARGET_GCC_WRAPPERS_PREFIX)ar
TARGET_AS       = $(TARGET_CROSS)as
TARGET_CC       = $(TARGET_CROSS)gcc
TARGET_CPP      = $(TARGET_CROSS)cpp
TARGET_CXX      = $(TARGET_CROSS)g++
TARGET_LD       = $(TARGET_CROSS)ld
TARGET_NM       = $(TARGET_CROSS)$(TARGET_GCC_WRAPPERS_PREFIX)nm
TARGET_RANLIB   = $(TARGET_CROSS)$(TARGET_GCC_WRAPPERS_PREFIX)ranlib
TARGET_READELF  = $(TARGET_CROSS)readelf
TARGET_OBJCOPY  = $(TARGET_CROSS)objcopy
TARGET_OBJDUMP  = $(TARGET_CROSS)objdump

TARGET_STRIP = $(TARGET_CROSS)strip

HOST_CPPFLAGS  = -I$(HOST_DIR)/include
HOST_CFLAGS   ?= -O2
HOST_CFLAGS   += $(HOST_CPPFLAGS)
HOST_CXXFLAGS += $(HOST_CFLAGS)
HOST_LDFLAGS  += -L$(HOST_DIR)/lib -Wl,-rpath,$(HOST_DIR)/lib

# host-intltool should be executed with the system perl, so we save
# the path to the system perl, before a host-perl built by Buildroot
# might get installed into $(HOST_DIR)/bin and therefore appears
# in our PATH. This system perl will be used as INTLTOOL_PERL.
export PERL=$(shell which perl)


TARGET_MAKE_ENV = PATH=$(PATH)

TARGET_CONFIGURE_ENV = \
	$(TARGET_MAKE_ENV) \
	AR="$(TARGET_AR)" \
	AS="$(TARGET_AS)" \
	LD="$(TARGET_LD)" \
	NM="$(TARGET_NM)" \
	CC="$(TARGET_CC)" \
	GCC="$(TARGET_CC)" \
	CPP="$(TARGET_CPP)" \
	CXX="$(TARGET_CXX)" \
	RANLIB="$(TARGET_RANLIB)" \
	READELF="$(TARGET_READELF)" \
	STRIP="$(TARGET_STRIP)" \
	OBJCOPY="$(TARGET_OBJCOPY)" \
	OBJDUMP="$(TARGET_OBJDUMP)" \
	AR_FOR_BUILD="$(HOSTAR)" \
	AS_FOR_BUILD="$(HOSTAS)" \
	CC_FOR_BUILD="$(HOSTCC)" \
	GCC_FOR_BUILD="$(HOSTCC)" \
	CXX_FOR_BUILD="$(HOSTCXX)" \
	LD_FOR_BUILD="$(HOSTLD)" \
	CPPFLAGS_FOR_BUILD="$(HOST_CPPFLAGS)" \
	CFLAGS_FOR_BUILD="$(HOST_CFLAGS)" \
	CXXFLAGS_FOR_BUILD="$(HOST_CXXFLAGS)" \
	LDFLAGS_FOR_BUILD="$(HOST_LDFLAGS)" \
	FCFLAGS_FOR_BUILD="$(HOST_FCFLAGS)" \
	DEFAULT_ASSEMBLER="$(TARGET_AS)" \
	DEFAULT_LINKER="$(TARGET_LD)" \
	CPPFLAGS="$(TARGET_CPPFLAGS)" \
	CFLAGS="$(TARGET_CFLAGS)" \
	CXXFLAGS="$(TARGET_CXXFLAGS)" \
	LDFLAGS="$(TARGET_LDFLAGS)" \
	CROSS_COMPILE="$(TARGET_CROSS)" \
	ARCH="$(TARGET_ARCH)" \

TARGET_CONFIGURE_ENV += \
	PKG_CONFIG="$(PKG_CONFIG_HOST_BINARY)" \
	PKG_CONFIG_PATH="$(TARGET_LIB_DIR)/pkgconfig" \
	PKG_CONFIG_SYSROOT_DIR="$(TARGET_DIR)"

HOST_MAKE_ENV = \
	export PKG_CONFIG=/usr/bin/pkg-config; \
	PATH=$(PATH) \
	PKG_CONFIG_SYSROOT_DIR="/" \
	PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1 \
	PKG_CONFIG_ALLOW_SYSTEM_LIBS=1 \
	PKG_CONFIG_LIBDIR="$(HOST_DIR)/lib/pkgconfig:$(HOST_DIR)/share/pkgconfig"

HOST_CONFIGURE_ENV = \
	$(HOST_MAKE_ENV) \
	AR="$(HOSTAR)" \
	AS="$(HOSTAS)" \
	LD="$(HOSTLD)" \
	NM="$(HOSTNM)" \
	CC="$(HOSTCC)" \
	GCC="$(HOSTCC)" \
	CXX="$(HOSTCXX)" \
	CPP="$(HOSTCPP)" \
	OBJCOPY="$(HOSTOBJCOPY)" \
	RANLIB="$(HOSTRANLIB)" \
	CPPFLAGS="$(HOST_CPPFLAGS)" \
	CFLAGS="$(HOST_CFLAGS)" \
	CXXFLAGS="$(HOST_CXXFLAGS)" \
	LDFLAGS="$(HOST_LDFLAGS)" \
	INTLTOOL_PERL=$(PERL)

TARGET_CONFIGURE_ARGS = \
	ac_cv_func_mmap_fixed_mapped=yes \
	ac_cv_func_memcmp_working=yes \
	ac_cv_have_decl_malloc=yes \
	gl_cv_func_malloc_0_nonnull=yes \
	ac_cv_func_malloc_0_nonnull=yes \
	ac_cv_func_calloc_0_nonnull=yes \
	ac_cv_func_realloc_0_nonnull=yes \
	lt_cv_sys_lib_search_path_spec=""

################################################################################

BASE_DIR       := ${CURDIR}

DL_DIR         ?= $(HOME)/Archive
BUILD_DIR       = $(BASE_DIR)/build_tmp
ifeq ($(IMAGE_LAYOUT),subdirboot)
RELEASE_DIR     = $(BASE_DIR)/release/linuxrootfs1
else
RELEASE_DIR     = $(BASE_DIR)/release
endif
DEPS_DIR        = $(BASE_DIR)/.deps
D               = $(DEPS_DIR)
TARGET_DIR      = $(BASE_DIR)/root
IMAGE_DIR       = $(BASE_DIR)/release_image
OWN_FILES      ?= $(BASE_DIR)/own_files
OWN_PATCHES    ?= $(BASE_DIR)/own_patches
CROSS_DIR       = $(BASE_DIR)/build_cross/$(TARGET_ARCH)-$(CROSSTOOL_GCC_VERSION)-kernel-$(KERNEL_VERSION)
CROSS_ROOT_DIR  = $(CROSS_DIR)/$(GNU_TARGET_NAME)/sysroot
HOST_DIR        = $(BASE_DIR)/build_host

DATE            = $(shell date '+%Y-%m-%d_%H.%M')
MAINTAINER     ?= $(shell whoami)

CD              = set -e; cd
CD_BUILD_DIR    = $(CD) $(PKG_BUILD_DIR)
CHDIR           = $(CD) $(BUILD_DIR)
MKDIR           = mkdir -p $(BUILD_DIR)
CPDIR           = cp -a -t $(BUILD_DIR) $(DL_DIR)

PKG_CONFIG_PATH   = $(TARGET_LIB_DIR)/pkgconfig
PKG_CONFIG_LIBDIR = $(TARGET_LIB_DIR)/pkgconfig

UPDATE-RC.D     = support/scripts/update-rc.d -r $(TARGET_DIR)
REMOVE-RC.D     = support/scripts/update-rc.d -f -r $(TARGET_DIR)

AUTOCONF_VER = $(shell autoconf --version | head -1 | awk '{print $$4}')
AUTOCONF_NEW = $(shell echo $(AUTOCONF_VER)\>=2.70 | bc )

# build helper variables
INSTALL      = $(shell which install || type -p install || echo install)
INSTALL_CONF = $(INSTALL) -m 0600
INSTALL_DATA = $(INSTALL) -m 0644
INSTALL_EXEC = $(INSTALL) -m 0755
INSTALL_COPY = cp -a

define INSTALL_EXIST # (source, dest)
	if [ -d $(dir $(1)) ]; then \
		$(INSTALL) -d $(2); \
		$(INSTALL_COPY) $(1) $(2); \
	fi
endef

# search path(s) for all prerequisites
VPATH = $(DEPS_DIR)

# -----------------------------------------------------------------------------

include package/environment-linux.mk
include package/environment-target.mk
include $(sort $(wildcard package/*/*/*.mk))
include package/bootstrap.mk
include package/cleantargets.mk
include package/flashimage.mk
include package/pkg-autotools.mk
include package/pkg-cmake.mk
include package/pkg-generic.mk
include package/pkg-individual.mk
include package/pkg-kconfig.mk
include package/pkg-kernel-module.mk
include package/pkg-meson.mk
include package/pkg-python.mk
include package/pkg-utils.mk
include package/pkg-waf.mk
include package/pkg-helper.mk
