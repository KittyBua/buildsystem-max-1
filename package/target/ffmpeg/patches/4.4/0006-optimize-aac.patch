--- a/libavcodec/aacdec_template.c
+++ b/libavcodec/aacdec_template.c
@@ -2583,7 +2583,7 @@
  * @param   decode  1 if tool is used normally, 0 if tool is used in LTP.
  * @param   coef    spectral coefficients
  */
-static void apply_tns(INTFLOAT coef_param[1024], TemporalNoiseShaping *tns,
+static __attribute__((optimize(0))) void apply_tns(INTFLOAT coef_param[1024], TemporalNoiseShaping *tns,
                       IndividualChannelStream *ics, int decode)
 {
     const int mmm = FFMIN(ics->tns_max_bands, ics->max_sfb);
-static void decorrelation(PSContext *ps, INTFLOAT (*out)[32][2], const INTFLOAT (*s)[32][2], int is34)
+static void __attribute__((optimize(0))) decorrelation(PSContext *ps, INTFLOAT (*out)[32][2], const INTFLOAT (*s)[32][2], int is34)
 {
     LOCAL_ALIGNED_16(INTFLOAT, power, [34], [PS_QMF_TIME_SLOTS]);
     LOCAL_ALIGNED_16(INTFLOAT, transient_gain, [34], [PS_QMF_TIME_SLOTS]);
--- a/libavcodec/fft_template.c
+++ b/libavcodec/fft_template.c
@@ -546,7 +546,7 @@
     pass(z,FFT_NAME(ff_cos_##n),n4/2);\
 }
 
-static void fft4(FFTComplex *z)
+static void __attribute__((optimize(0))) fft4(FFTComplex *z)
 {
     FFTDouble t1, t2, t3, t4, t5, t6, t7, t8;
 
@@ -560,7 +560,7 @@
     BF(z[2].im, z[0].im, t2, t5);
 }
 
-static void fft8(FFTComplex *z)
+static void __attribute__((optimize(0))) fft8(FFTComplex *z)
 {
     FFTDouble t1, t2, t3, t4, t5, t6;
 
